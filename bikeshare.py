{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import time\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "\n",
    "CITY_DATA = { 'chicago': 'chicago.csv',\n",
    "              'new york city': 'new_york_city.csv',\n",
    "              'washington': 'washington.csv' }\n",
    "\n",
    "#function for getting filters\n",
    "def get_filters():\n",
    "    \"\"\"\n",
    "    Asks user to specify a city, month, and day to analyze.\n",
    "\n",
    "    Returns:\n",
    "        (str) city - name of the city to analyze\n",
    "        (str) month - name of the month to filter by, or \"all\" to apply no month filter\n",
    "        (str) day - name of the day of week to filter by, or \"all\" to apply no day filter\n",
    "    \"\"\"\n",
    "    print('Hello! Let\\'s explore some US bikeshare data!')\n",
    "    #get user input for city (chicago, new york city, washington). HINT: Use a while loop to handle invalid inputs\n",
    "    city = input(\"Enter Name of City to Analyze (Chicago, New York City, or Washington)\").lower()\n",
    "    cities = ['chicago', 'new york city', 'washington']\n",
    "    if city not in cities:\n",
    "        print(\"INVALID CITY INPUT\")\n",
    "        exit()\n",
    "\n",
    "    #get user input for month (all, january, february, ... , june)\n",
    "    month = input(\"Enter Name of Month to Filter By or Enter all For No Filter (all, january, february, ... , june)\").lower()\n",
    "    months = ['all','january','february','march','april','may','june']\n",
    "    if month not in months:\n",
    "        print(\"INVALID MONTH INPUT\")\n",
    "        exit()\n",
    "\n",
    "    #get user input for day of week (all, monday, tuesday, ... sunday)\n",
    "    day = input(\"Enter Day (by number) of Week to Filter By or Enter all For No Filter (all, monday, tuesday, ... sunday)\").lower()\n",
    "    days = ['all','monday','tuesday','wednesday','thursday','friday','saturday','sunday']\n",
    "    if day not in days:\n",
    "        print(\"INVALID DAY INPUT\")\n",
    "        exit()\n",
    "\n",
    "    print('-'*40)\n",
    "    return city, month, day\n",
    "\n",
    "#function for loading data\n",
    "def load_data(city, month, day):\n",
    "    \"\"\"\n",
    "    Loads data for the specified city and filters by month and day if applicable.\n",
    "\n",
    "    Args:\n",
    "        (str) city - name of the city to analyze\n",
    "        (str) month - name of the month to filter by, or \"all\" to apply no month filter\n",
    "        (str) day - name of the day of week to filter by, or \"all\" to apply no day filter\n",
    "    Returns:\n",
    "        df - Pandas DataFrame containing city data filtered by month and day\n",
    "    \"\"\"\n",
    "    \n",
    "    # load data file into a dataframe\n",
    "    df = pd.read_csv(CITY_DATA[city])\n",
    "\n",
    "    # convert the Start Time column to datetime\n",
    "    df['Start Time'] = pd.to_datetime(df['Start Time'])\n",
    "\n",
    "    # extract month and day of week from Start Time to create new columns\n",
    "    df['month'] = df['Start Time'].dt.month\n",
    "    df['day_of_week'] = df['Start Time'].dt.weekday_name\n",
    "\n",
    "    # filter by month if applicable\n",
    "    if month != 'all':\n",
    "        # use the index of the months list to get the corresponding int\n",
    "        months = ['january', 'february', 'march', 'april', 'may', 'june']\n",
    "        month = months.index(month) + 1\n",
    "    \n",
    "        # filter by month to create the new dataframe\n",
    "        df = df[df['month'] == month]\n",
    "\n",
    "    # filter by day of week if applicable\n",
    "    if day != 'all':\n",
    "        # filter by day of week to create the new dataframe\n",
    "        df = df[df['day_of_week'] == day.title()]\n",
    "\n",
    "    return df\n",
    "\n",
    "def raw_data(df):\n",
    "    raw = input(\"Would You Like To See Raw Data? (yes or no)\").lower()\n",
    "    if raw == 'yes':\n",
    "        print(df.head(5))\n",
    "        i = 10\n",
    "        while i <= df.shape[0]:\n",
    "            raw2 = input(\"Would You Like To See 5 More Rows? (yes or no)\").lower()\n",
    "            if raw2 == 'yes':\n",
    "                print(df.head(i))\n",
    "                i += 5\n",
    "            else:\n",
    "                i = df.shape[0] + 5\n",
    "                       \n",
    "\n",
    "#function for time stats\n",
    "def time_stats(df):\n",
    "    \"\"\"Displays statistics on the most frequent times of travel.\"\"\"\n",
    "    print('\\nCalculating The Most Frequent Times of Travel...\\n')\n",
    "    start_time = time.time()\n",
    "\n",
    "    #display the most common month\n",
    "    df['Start Time'] = pd.to_datetime(df['Start Time'])\n",
    "    df['month'] = df['Start Time'].dt.month\n",
    "    popular_month = df['month'].mode()[0]\n",
    "    \n",
    "    print('Most Common Month:', popular_month)\n",
    "\n",
    "    #display the most common day of week\n",
    "    df['week'] = df['Start Time'].dt.week\n",
    "    popular_week = df['week'].mode()[0]\n",
    "    \n",
    "    print('Most Common Week:', popular_week)\n",
    "\n",
    "    #display the most common start hour\n",
    "    df['hour'] = df['Start Time'].dt.hour\n",
    "    popular_hour = df['hour'].mode()[0]\n",
    "\n",
    "    print('Most Popular Start Hour:', popular_hour)\n",
    "\n",
    "    print(\"\\nThis took %s seconds.\" % (time.time() - start_time))\n",
    "    print('-'*40)\n",
    "\n",
    "\n",
    "#function for station stats   \n",
    "def station_stats(df):\n",
    "    \"\"\"Displays statistics on the most popular stations and trip.\"\"\"\n",
    "\n",
    "    print('\\nCalculating The Most Popular Stations and Trip...\\n')\n",
    "    start_time = time.time()\n",
    "\n",
    "    #display most commonly used start station\n",
    "    popular_start = df['Start Station'].mode()[0]\n",
    "    print('Most Popular Start Station:', popular_start)\n",
    "\n",
    "    #display most commonly used end station\n",
    "    popular_end = df['End Station'].mode()[0]\n",
    "    print('Most Popular End Station:', popular_end)\n",
    "\n",
    "    #display most frequent combination of start station and end station trip\n",
    "    df['Start and End Station'] = df['Start Station'] + \", \" + df['End Station']\n",
    "    popular_start_end = df['Start and End Station'].mode()[0]\n",
    "    print('Most Popular Start and End Station:', popular_start_end)\n",
    "\n",
    "    print(\"\\nThis took %s seconds.\" % (time.time() - start_time))\n",
    "    print('-'*40)\n",
    "\n",
    "\n",
    "#function for trip duration stats\n",
    "def trip_duration_stats(df):\n",
    "    \"\"\"Displays statistics on the total and average trip duration.\"\"\"\n",
    "\n",
    "    print('\\nCalculating Trip Duration...\\n')\n",
    "    start_time = time.time()\n",
    "\n",
    "    #display total travel time\n",
    "    print('Total Travel Time:', sum(df['Trip Duration']))\n",
    "\n",
    "    #display mean travel time\n",
    "    print('Total Travel Time:', df['Trip Duration'].mean())\n",
    "\n",
    "    print(\"\\nThis took %s seconds.\" % (time.time() - start_time))\n",
    "    print('-'*40)\n",
    "\n",
    "\n",
    "#function for user stats\n",
    "def user_stat(df):\n",
    "    \"\"\"Displays statistics on bikeshare users.\"\"\"\n",
    "\n",
    "    print('\\nCalculating User Stats...\\n')\n",
    "    start_time = time.time()\n",
    "\n",
    "    # Display counts of user types\n",
    "    user_types = df['User Type'].value_counts()\n",
    "    print(user_types)\n",
    "    \n",
    "    if 'Gender' not in df.columns:\n",
    "        print(\"Washington Does Not Contain Gender or Birth Year\")\n",
    "    else:\n",
    "        #Display counts of gender\n",
    "        gender_count = df['Gender'].value_counts()\n",
    "        print(user_types)\n",
    "\n",
    "        #Display earliest, most recent, and most common year of birth\n",
    "        print('Earliest Year of Birth:', min(df['Birth Year']))\n",
    "        print('Most Recent Year of Birth:', max(df['Birth Year']))\n",
    "        print('Most Common Year of Birth:', df['Birth Year'].mode()[0])\n",
    "    \n",
    "    print(\"\\nThis took %s seconds.\" % (time.time() - start_time))\n",
    "    print('-'*40)\n",
    "\n",
    "\n",
    "#main function\n",
    "def main():\n",
    "    while True:\n",
    "        city, month, day = get_filters()\n",
    "        df = load_data(city, month, day)\n",
    "\n",
    "        raw_data(df)\n",
    "        time_stats(df)\n",
    "        station_stats(df)\n",
    "        trip_duration_stats(df)\n",
    "        user_stat(df)\n",
    "\n",
    "        restart = input('\\nWould you like to restart? Enter yes or no.\\n')\n",
    "        if restart.lower() != 'yes':\n",
    "            break\n",
    "\n",
    "\n",
    "if __name__ == \"__main__\":\n",
    "\tmain()\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
